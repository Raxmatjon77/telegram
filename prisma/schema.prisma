
datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

enum Role {
  bot
  user
  admin
  moderator
}

enum Language {
  uzb
  rus
  eng
  kaa
  @@map("language")
}

enum UserStatus {
  online
  offline
  away
  busy
  invisible
  @@map("user_status")
}

enum MessageType {
  text
  file
  voice
  video
  image
  document
  sticker
  gif
  poll
  location
  contact
  reply
  forwarded
  system
  @@map("message_type")
}

enum ChatType {
  private
  group
  channel
  supergroup
  @@map("chat_type")
}

enum FileType {
  image
  video
  audio
  document
  voice
  sticker
  @@map("file_type")
}

model User {
  id        String   @id @default(ulid())
  role      Role     @default(user)
  email     String   @unique
  phone     String?  @unique
  username  String   @unique
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  password  String?
  avatar    String?
  bio       String?  // NEW: User biography
  status    UserStatus @default(offline)
  language  Language @default(uzb)
  isBot     Boolean  @default(false) @map("is_bot") // NEW: Bot identification
  isVerified Boolean @default(false) @map("is_verified") // NEW: Verified account
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  lastSeenAt DateTime? @map("last_seen_at") // NEW: Last activity tracking

  // Relationships
  messages      Message[]
  chats         ChatParticipant[]
  sessions      Session[]
  ownedChats    Chat[] @relation("OwnerChats")
  blockedUsers  UserBlock[] @relation("BlockerUser") 
  blockedByUsers UserBlock[] @relation("BlockedUser") 
  messageReactions MessageReaction[] 
  files         File[] 

  @@index([email])
  @@index([username])
  @@index([phone])
  @@index([isBot]) // NEW: Index for bot queries
  @@index([isVerified]) // NEW: Index for verified users
  @@index([deletedAt])
  @@index([lastSeenAt]) // NEW: Index for activity queries
  @@map("users")
}

model Session {
  id        String      @id @default(ulid())
  userId    String      @map("user_id")
  userAgent String?     @map("user_agent")
  ip        String?
  device    String? 
  deviceId  String?     @map("device_id")
  platform  String?
  lastSeen  DateTime    @default(now()) @map("last_seen")
  isActive  Boolean     @default(true) @map("is_active") 
  socketId  String?     @unique @map("socket_id") 
  createdAt DateTime    @default(now()) @map("created_at")
  deletedAt  DateTime?  @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique(map: "device_id_uqk",fields: [deviceId])
  @@index([userId])
  @@index([isActive])
  @@index([lastSeen])
  @@index([deviceId])
  @@map("sessions")
}

model Chat {
  id          String    @id @default(ulid())
  title       String?
  description String?  
  type        ChatType
  ownerId     String?   @map("owner_id") 
  avatar      String?   @map("avatar")
  inviteLink  String?   @unique @map("invite_link") // NEW: Invitation links
  isPublic    Boolean   @default(false) @map("is_public") // NEW: Public/private chats
  membersCount Int      @default(0) @map("members_count") 
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  messages       Message[]
  participants   ChatParticipant[]
  owner          User? @relation("OwnerChats", fields: [ownerId], references: [id])

  @@index([title], name: "chat_title_index")
  @@index([type], name: "chat_type_index")
  @@index([ownerId], name: "chat_owner_index")
  @@index([isPublic]) // NEW: Index for public chat discovery
  @@index([inviteLink]) // NEW: Index for invite link lookups
  @@index([membersCount]) // NEW: Index for member count queries
  @@index([deletedAt])
  @@unique([title, type]) 
  @@map("chats") 
}

model ChatParticipant {
  id           String   @id @default(ulid())
  userId       String   @map("user_id") 
  chatId       String   @map("chat_id") 
  role         String   @default("member") @map("role") // NEW: owner, admin, member
  isAdmin      Boolean  @default(false) @map("is_admin") @db.Boolean
  joinedAt     DateTime @default(now()) @map("joined_at")
  leftAt       DateTime? @map("left_at")
  isPinned     Boolean  @default(false) @map("is_pinned") @db.Boolean
  isMuted      Boolean  @default(false) @map("is_muted") @db.Boolean
  isArchived   Boolean  @default(false) @map("is_archived") @db.Boolean
  isRead       Boolean  @default(true)  @map("is_read") @db.Boolean
  lastReadMessageId String? @map("last_read_message_id") // NEW: Per-user read tracking
  unreadCount  Int      @default(0) @map("unread_count") // NEW: Unread message counter

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([userId], name: "chat_participant_user_index")
  @@index([chatId], name: "chat_participant_chat_index")
  @@index([role]) // NEW: Index for role-based queries
  @@index([leftAt]) // NEW: Index for active participants
  @@unique([userId, chatId])
  @@map("chat_participants")
}

model Message {
  id              String      @id @default(ulid())
  chatId          String      @map("chat_id")
  senderId        String      @map("sender_id")
  text            String?
  type            MessageType @default(text)
  content         String?
  replyToId       String?     @map("reply_to_id")
  forwardedFromId String?     @map("forwarded_from_id")
  threadId        String?     @map("thread_id") // NEW: For message threading
  editedAt        DateTime?   @map("edited_at") // NEW: Message edit tracking
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  deletedAt       DateTime?   @map("deleted_at")

  chat            Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender          User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyTo         Message?   @relation("replyTo", fields: [replyToId], references: [id])
  replies         Message[]  @relation("replyTo")
  forwardedFrom   Message?   @relation("forwardedFrom", fields: [forwardedFromId], references: [id])
  forwarded       Message[]  @relation("forwardedFrom")
  thread          Message?   @relation("MessageThread", fields: [threadId], references: [id]) // NEW: Thread support
  threadMessages  Message[]  @relation("MessageThread") // NEW: Messages in thread
  files           File[]     // NEW: Attached files
  reactions       MessageReaction[] // NEW: Message reactions

  @@index([chatId], name: "message_chat_index")
  @@index([senderId], name: "message_sender_index")
  @@index([type], name: "message_type_index")
  @@index([createdAt], name: "message_created_at_index")
  @@index([replyToId])
  @@index([threadId]) 
  @@index([editedAt]) 
  @@index([deletedAt]) 
  @@index([chatId, createdAt]) 
  @@unique([chatId, id]) 
  @@map("messages")
}

model MessageReaction {
  id        String   @id @default(ulid())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  emoji     String   // üëç, ‚ù§Ô∏è, üòÇ, üòÆ, üò¢, üò°
  createdAt DateTime @default(now()) @map("created_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji]) // Prevent duplicate reactions
  @@index([messageId])
  @@index([userId])
  @@index([emoji]) // For emoji statistics
  @@map("message_reactions")
}


model File {
  id           String   @id @default(ulid())
  messageId    String?  @map("message_id")
  uploaderId   String   @map("uploader_id")
  fileName     String   @map("file_name")
  originalName String   @map("original_name")
  mimeType     String   @map("mime_type")
  fileType     FileType @map("file_type")
  size         Int     
  url          String   
  thumbnailUrl String?  @map("thumbnail_url") // Thumbnail for images/videos
  duration     Int?     // Duration for audio/video files (seconds)
  width        Int?     // Width for images/videos
  height       Int?     // Height for images/videos
  createdAt    DateTime @default(now()) @map("created_at")

  message  Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  uploader User @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([uploaderId])
  @@index([fileType])
  @@index([mimeType])
  @@index([createdAt])
  @@map("files")
}

model UserBlock {
  id        String   @id @default(ulid())
  blockerId String   @map("blocker_id")
  blockedId String   @map("blocked_id")
  reason    String? 
  createdAt DateTime @default(now()) @map("created_at")

  blocker User @relation("BlockerUser", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId]) 
  @@index([blockerId])
  @@index([blockedId])
  @@map("user_blocks")
}
