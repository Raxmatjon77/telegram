datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}


enum Role {
  bot           @map("bot")
  user          @map("user")
  operator      @map("operator")
  superOperator @map("superOperator")
  @@map("role")
}

enum Language {
  uzb @map("uzb")
  rus @map("rus")
  eng @map("eng")
  kaa @map("kaa")
  @@map("language")
}

enum UserStatus {
  online  @map("online")
  offline @map("offline")
  @@map("user_status")
}

enum RoomStatus {
  active @map("active")
  closed @map("closed")
  @@map("room_status")
}

enum MessageType {
  file    @map("file")
  link    @map("link")
  message @map("message")
  @@map("message_type")
}

model Auth {
  id        String    @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  role      Role      @map("role")
  username  String    @map("username") @db.VarChar()
  password  String    @map("password") @db.VarChar()
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  @@id([id])
  @@map("auth")
}

model User {
  id            String     @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  role          Role       @map("role")
  avatar        String?    @map("avatar") @db.VarChar(255)
  status        UserStatus @map("status")
  username      String     @map("username") @db.VarChar()
  language      Language   @default(uzb) @map("language")
  socketId      String?    @map("socket_id") @db.VarChar()
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt     DateTime?  @map("deleted_at") @db.Timestamp(0)
  room          Room[]
  message       Message[]
  history       History[]
  @@id([id])
  @@map("user")
}

model Room {
  id         String     @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  name       String?    @map("name") @db.VarChar()
  userId     String     @map("user_id") @db.Uuid
  status     RoomStatus @map("status")
  operatorIn Boolean    @default(false) @map("operator_in") @db.Boolean
  operatorId String?    @map("operator_id") @db.Uuid
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt  DateTime?  @map("deleted_at") @db.Timestamp(0)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  message    Message[]
  @@id([id])
  @@map("room")
}

model Message {
  id        String      @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  text      String?     @map("text") @db.VarChar()
  type      MessageType @map("type")
  read      Boolean     @default(false) @map("read") @db.Boolean
  content   String?     @map("content") @db.VarChar()
  roomId    String      @map("room_id") @db.Uuid
  userId    String      @map("user_id") @db.Uuid
  replyToId String?     @map("reply_to_id") @db.Uuid // Added for replies
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime?   @map("deleted_at") @db.Timestamp(0)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  room      Room        @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replyTo   Message?    @relation("Replies", fields: [replyToId], references: [id])
  replies   Message[]   @relation("Replies")
  @@id([id])
  @@map("message")
}

model History {
  id        String    @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid
  file      String    @map("file") @db.VarChar()
  userId    String    @map("user_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(0)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@id([id])
  @@map("history")
}