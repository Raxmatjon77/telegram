
datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

enum Role {
  bot
  user
}

enum Language {
  uzb
  rus
  eng
  kaa
  @@map("language")
}

enum UserStatus {
  online
  offline
  @@map("user_status")
}

enum MessageType {
  text
  file
  voice
  video
  sticker
  reply
  forwarded
  system
  @@map("message_type")
}

enum ChatType {
  private
  group
  channel
  @@map("chat_type")
}

model User {
  id        String   @id @default(ulid())
  role      Role
  email     String   @unique
  phone     String?  @unique
  username  String   @unique
  firstName String?
  lastName  String?
  password  String?
  avatar    String?
  status    UserStatus
  language  Language @default(uzb)
  socketId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  messages      Message[]
  chats         ChatParticipant[]
  sessions      Session[]
  ownedChats    Chat[] @relation("OwnerChats")
}

model Session {
  id        String   @id @default(ulid())
  userId    String   @map("user_id")
  userAgent String?
  ip        String?
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id        String    @id @default(ulid())
  title     String?
  type      ChatType
  ownerId   String?   @map("owner_id") 
  avatar    String?   @map("avatar")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  messages       Message[]
  participants   ChatParticipant[]
  owner          User? @relation("OwnerChats", fields: [ownerId], references: [id])

  @@index([title], name: "chat_title_index")
  @@index([type], name: "chat_type_index")
  @@index([ownerId], name: "chat_owner_index")
  @@unique([title, type]) 
  @@map("chats") 
  
}

model ChatParticipant {
  id        String   @id @default(ulid())
  userId    String   @map("user_id") 
  chatId    String   @map("chat_id") 
  isAdmin   Boolean  @default(false) @map("is_admin") @db.Boolean
  joinedAt  DateTime @default(now()) @map("joined_at")
  isPinned   Boolean  @default(false) @map("is_pinned") @db.Boolean
  isMuted    Boolean  @default(false) @map("is_muted") @db.Boolean
  isArchived Boolean  @default(false) @map("is_archived") @db.Boolean
  isRead     Boolean  @default(true)  @map("is_read") @db.Boolean
  leftAt   DateTime? @map("left_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([userId], name: "chat_participant_user_index")
  @@index([chatId], name: "chat_participant_chat_index")
  @@unique([userId, chatId])
  @@map("chat_participants")
}


model Message {
  id         String      @id @default(ulid())
  chatId     String      @map("chat_id")
  senderId   String      @map("sender_id")
  text       String?
  type       MessageType @default(text)
  content    String?
  replyToId  String?
  forwardedFromId String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deletedAt  DateTime?

  chat        Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender      User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyTo     Message?   @relation("replyTo", fields: [replyToId], references: [id])
  replies     Message[]  @relation("replyTo")
  forwardedFrom Message? @relation("forwardedFrom", fields: [forwardedFromId], references: [id])
  forwarded   Message[]  @relation("forwardedFrom")

  @@index([chatId], name: "message_chat_index")
  @@index([senderId], name: "message_sender_index")
  @@index([type], name: "message_type_index")
  @@index([createdAt], name: "message_created_at_index")
  @@unique([chatId, id]) // Ensures unique messages per chat
  @@map("messages")
}
